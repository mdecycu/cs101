var tipuesearch = {"pages": [{'title': 'About', 'text': 'Robot Programming in Brython and Python \n', 'tags': '', 'url': 'About.html'}, {'title': 'Reeborg', 'text': 'local:  https://127.0.0.1:8449/reeborg/ \n 因為 reeborg 目錄為子模組, 指向  https://github.com/mdecycu/reeborg,  因此程式開發部分均在子模組中進行, 採 cd reeborg, git pull origin main, cd .. 流程進行子模組程式碼更新. \n Web:  https://mde.tw/cs101/reeborg  ', 'tags': '', 'url': 'Reeborg.html'}, {'title': 'Robot', 'text': 'https://pythonpad.github.io/docs/examples.html \xa0 \n https://github.com/pythonpad/pythonpad.js \xa0 \n cs1graphics.pdf \n cs1graphics is a Python module specifically designed for introductory computer science courses, particularly those focusing on object-oriented programming and graphics. It provides a simple and intuitive way to create and manipulate graphical objects on a canvas, making it easier for beginners to visualize and understand programming concepts. \n Key features and concepts of cs1graphics include: \n Canvas: \n The Canvas class represents the drawing window where graphical objects are displayed. \n Drawable Objects: \n cs1graphics offers various classes for creating different shapes and elements, such as Circle, Rectangle,Text, Image, Polygon, and Path. These objects can be manipulated by setting properties like size, color, position, and border styles. \n Object-Oriented Principles: \n The library is built upon object-oriented principles, allowing students to learn about classes, objects, methods, and attributes in a practical context. \n Animation: \n It supports basic animation by allowing objects to be moved and transformed over time, often by repeatedly redrawing the canvas after changing object properties. \n Accessibility: \n It aims to simplify graphics programming for beginners, abstracting away the complexities of underlying graphics libraries like Tkinter or PIL.\xa0 In essence, cs1graphics serves as a pedagogical tool to introduce fundamental programming concepts through visual and interactive graphics creation. \n cs1media.pdf \n cs1media is a Python library primarily designed for educational purposes, specifically for introductory computer science courses (often referred to as CS1). It provides a simplified interface for image manipulation, allowing students to easily load, modify, and display images. \n Key features of cs1media: \n Image Loading and Display: \n It enables users to load images from files and display them in a window. \n Pixel-level Manipulation: \n Users can access individual pixels within an image and modify their RGB color values. This allows for various image processing techniques like grayscale conversion, color replacement, or applying filters. \n Simplified Interface: \n Compared to more complex image processing libraries, cs1media offers a straightforward set of functions and methods, making it accessible for beginners. \n Educational Context: \n It is commonly used in environments like Pythonpad, which is an embeddable Python programming environment designed for web-based CS1 exercises. \n from cs1media import *\n\n# Load an image\nimg = load_picture("example.png")\n\n# Get image dimensions\nwidth, height = img.size()\n\n# Convert image to grayscale\nfor y in range(height):\n    for x in range(width):\n        r, g, b = img.get(x, y)\n        gray = int(0.299 * r + 0.587 * g + 0.114 * b)\n        img.set(x, y, (gray, gray, gray))\n\n# Display the modified image\nimg.show() \n cs1robots.pdf \n cs1robots is a Python library designed for teaching introductory programming concepts using a robot simulation. It provides a simple, grid-based world where a virtual robot can perform basic actions like moving, turning, picking up, and putting down beepers. This library is inspired by RUR-PLE and aims to make learning programming more engaging through visual interaction. \n Key features and usage: \n Robot actions: \n The cs1robots library allows users to program a robot to perform fundamental actions such as move(), turn_left(), pick_beeper(), and put_beeper(). \n World interaction: \n Robots can interact with walls and beepers within a customizable world. \n Visual feedback: \n The library provides a graphical representation of the robot\'s actions and the world, making it easy to visualize program execution. \n Educational focus: \n It is primarily used in educational settings to introduce concepts like loops, conditionals, and functions in a practical and visually intuitive manner. \n Install cs1robots: \n pip install cs1-robots \n from cs1robots import *\n\n# Create a world (or load an existing one)\ncreate_world() \n\n# Create a robot instance\nhubo = Robot()\n\n# Program the robot\'s actions\nhubo.move()\nhubo.turn_left()\nhubo.pick_beeper() \n', 'tags': '', 'url': 'Robot.html'}, {'title': 'Brython', 'text': '1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};